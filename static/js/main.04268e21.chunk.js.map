{"version":3,"sources":["components/Word.jsx","components/Counter.jsx","services/fetchWords.js","App.js","index.js"],"names":["Word","state","className","this","formatClass","onClick","props","onWordClick","word","title","toUpperCase","classes","colour","status","user","gameState","Component","Counter","showWinner","blueCount","redCount","currentTeam","role","words","filter","length","changeTeam","a","fetch","response","json","getWordsForNewGame","updateWord","index","App","handleWordClick","prevGameState","indexOf","setState","setUserAsPlayer","setUserAsSpymaster","changeCurrentTeam","startNewGame","then","data","getWords","nextState","nextProps","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04268e21.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Word.css\";\r\n\r\nclass Word extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div\r\n        className={this.formatClass()}\r\n        onClick={() => {\r\n          this.props.onWordClick(this.props.word);\r\n        }}\r\n      >\r\n        {this.props.word.title.toUpperCase()}\r\n      </div>\r\n    );\r\n  }\r\n  formatClass() {\r\n    let classes = \"word \";\r\n    const { colour, status } = this.props.word;\r\n    const user = this.props.user;\r\n    const gameState = this.props.gameState;\r\n    classes += colour + \" \";\r\n    classes += user + \" \";\r\n    classes += status + \" \";\r\n    if (\r\n      gameState === \"game-started\" && status === \"hidden-word\"\r\n        ? (classes += \"\")\r\n        : (classes += \" game-over\")\r\n    )\r\n      return classes;\r\n  }\r\n}\r\n\r\nexport default Word;\r\n","import React, { Component } from \"react\";\r\nimport \"./Counter.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nclass Counter extends Component {\r\n  render() {\r\n    const blueCount = this.props.words.filter(\r\n      (word) => word.colour === \"blue\" && word.status === \"hidden-word\"\r\n    ).length;\r\n    const redCount = this.props.words.filter(\r\n      (word) => word.colour === \"red\" && word.status === \"hidden-word\"\r\n    ).length;\r\n    return (\r\n      <div className=\"counter-container\">\r\n        <div className=\"counter\">\r\n          <div className=\"scores\">\r\n            <span className=\"redText\">{redCount}</span>-\r\n            <span className=\"blueText\">{blueCount}</span>\r\n          </div>\r\n          <button\r\n            className=\"counter-reset-button\"\r\n            onClick={this.props.changeTeam}\r\n          >\r\n            {\"End \" + this.props.currentTeam.toUpperCase() + \"'s Turn\"}\r\n          </button>\r\n        </div>\r\n        <div className=\"display-winner\">\r\n          <div className=\"counter-teamName\">\r\n            {this.props.currentTeam.toUpperCase() + \"'s Turn\"}\r\n          </div>\r\n          {this.showWinner(\r\n            blueCount,\r\n            redCount,\r\n            this.props.currentTeam,\r\n            this.props.gameState\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  showWinner = (blueCount, redCount, currentTeam, gameState) => {\r\n    if (gameState === \"black-word-clicked\") {\r\n      if (currentTeam === \"blue\") {\r\n        return (\r\n          <div\r\n            className=\"alert alert-warning alert-dismissible fade show\"\r\n            role=\"alert\"\r\n          >\r\n            Red Wins!\r\n          </div>\r\n        );\r\n      }\r\n      if (currentTeam === \"red\") {\r\n        return (\r\n          <div\r\n            className=\"alert alert-warning alert-dismissible fade show\"\r\n            role=\"alert\"\r\n          >\r\n            Blue Wins!\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    if (blueCount === 0)\r\n      return (\r\n        <div\r\n          className=\"alert alert-warning alert-dismissible fade show\"\r\n          role=\"alert\"\r\n        >\r\n          Blue Wins!\r\n        </div>\r\n      );\r\n    if (redCount === 0)\r\n      return (\r\n        <div\r\n          className=\"alert alert-warning alert-dismissible fade show\"\r\n          role=\"alert\"\r\n        >\r\n          Red Wins!\r\n        </div>\r\n      );\r\n  };\r\n}\r\n\r\nexport default Counter;\r\n","export async function getWords() {\r\n  const response = await fetch(\"/DemoMVC/board\");\r\n  return await response.json();\r\n}\r\n\r\nexport async function getWordsForNewGame() {\r\n  const response = await fetch(\"/DemoMVC/newGame\");\r\n  return await response.json();\r\n}\r\n\r\nexport async function updateWord(index, gameState, currentTeam) {\r\n  await fetch(\"/DemoMVC/words/\" + gameState + \"/\" + currentTeam + \"/\" + index);\r\n}\r\n","import React, { Component } from \"react\";\nimport Word from \"./components/Word\";\nimport Counter from \"./components/Counter\";\nimport \"./App.css\";\nimport {\n  getWords,\n  updateWord,\n  getWordsForNewGame,\n} from \"./services/fetchWords\";\n\nclass App extends Component {\n  state = {\n    words: [],\n    currentTeam: \"\",\n    gameState: \"\",\n    user: \"player\",\n  };\n\n  componentDidMount() {\n    getWords(this.state.gameState).then((data) => {\n      this.setState({\n        words: data.words,\n        currentTeam: data.currentTeam,\n        gameState: data.gameState,\n      });\n    });\n  }\n\n  shouldComponentUpdate(nextState, nextProps) {\n    if (\n      nextProps.gameState === \"game-started\" ||\n      this.state.user !== nextProps.user\n    )\n      return true;\n    else if (\n      this.state.gameState === \"black-word-clicked\" ||\n      this.state.gameState === \"player-win\"\n    )\n      return false;\n    else return true;\n  }\n\n  render() {\n    return (\n      <div className=\"board\">\n        <Counter\n          words={this.state.words}\n          currentTeam={this.state.currentTeam}\n          gameState={this.state.gameState}\n          changeTeam={this.changeCurrentTeam}\n        />\n        <div className=\"main-grid\">\n          {this.state.words.map((word) => (\n            <Word\n              key={word.title}\n              word={word}\n              user={this.state.user}\n              gameState={this.state.gameState}\n              onWordClick={this.handleWordClick}\n            />\n          ))}\n        </div>\n        <div className=\"action-container\">\n          <button\n            className={\n              this.state.user === \"player\" ? \"enable-button\" : \"disbale-button\"\n            }\n            onClick={this.setUserAsPlayer}\n          >\n            Player\n          </button>\n          <button\n            className={\n              this.state.user === \"spymaster\"\n                ? \"enable-button\"\n                : \"disbale-button\"\n            }\n            onClick={this.setUserAsSpymaster}\n          >\n            Spymaster\n          </button>\n          <button className=\"start-new-game\" onClick={this.startNewGame}>\n            Start New Game\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  handleWordClick = (word) => {\n    if (this.state.user === \"spymaster\") return;\n    const prevGameState = this.state.gameState;\n    let gameState = this.state.gameState;\n    let currentTeam = this.state.currentTeam;\n    const words = [...this.state.words];\n    const index = words.indexOf(word);\n    words[index] = { ...word };\n    words[index].status = \"revealed\";\n\n    const blueCount = words.filter(\n      (word) => word.colour === \"blue\" && word.status === \"hidden-word\"\n    ).length;\n    const redCount = words.filter(\n      (word) => word.colour === \"red\" && word.status === \"hidden-word\"\n    ).length;\n\n    if (word.colour === \"black\") gameState = \"black-word-clicked\";\n    if (blueCount === 0 || redCount === 0) gameState = \"player-win\";\n    if (word.colour === \"red\") currentTeam = \"red\";\n    if (word.colour === \"blue\") currentTeam = \"blue\";\n\n    this.setState({\n      words: words,\n      gameState: gameState,\n      currentTeam: currentTeam,\n    });\n\n    if (prevGameState === \"game-started\" || word.colour === \"black\")\n      updateWord(index, gameState, currentTeam);\n  };\n\n  setUserAsPlayer = () => {\n    this.setState({ user: \"player\" });\n  };\n  setUserAsSpymaster = (user) => {\n    this.setState({ user: \"spymaster\" });\n  };\n\n  changeCurrentTeam = () => {\n    let currentTeam = this.state.currentTeam;\n    if (currentTeam === \"red\") {\n      currentTeam = \"blue\";\n    } else if (currentTeam === \"blue\") {\n      currentTeam = \"red\";\n    }\n    this.setState({ currentTeam });\n  };\n\n  startNewGame = () => {\n    getWordsForNewGame(this.state.gameState).then((data) => {\n      this.setState({\n        words: data.words,\n        currentTeam: data.currentTeam,\n        gameState: data.gameState,\n      });\n    });\n  };\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}